#!/usr/bin/perl -w

# You received this file as part of Finroc
# A framework for integrated robot control
# 
# Copyright (C) Finroc GbR (finroc.org)
# 
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 2
# of the License, or (at your option) any later version.
# 
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
# 
#----------------------------------------------------------------------
# \file    finroc_sync
#
# \author  Tobias Foehst
#
# \date    2011-02-09
#
#----------------------------------------------------------------------

use strict;

use Env '$FINROC_HOME';
use Env '$FINROC_PROJECT_HOME';
use Data::Dumper;
use XML::Simple;
use Net::Ping;

use lib "$FINROC_HOME/scripts/perl";
use FINROC::messages;
use FINROC::getopt;



############################
##  Command line options  ##
############################

SetHelp "[<targets>]",
{
    "-s, --simulate" => "no changes on target system will be made",
    "-c, --config" => "configuration file - default: \$FINROC_PROJECT_HOME/etc/sync_config.xml",
    "-l, --list" => "list targets available in current configfile"
}, undef;

ParseCommandLine [ "simulate", "config=s", "list" ], undef;

# default values if not set
AssignCommandLineOptionDefaultValue "config", "$FINROC_PROJECT_HOME/etc/sync_config.xml" if defined $FINROC_PROJECT_HOME and not defined GetCommandLineOption "config";



ERRORMSG sprintf "Configuration file not specified and \$FINROC_PROJECT_HOME not set!. Use %s --help for more information!\n", ScriptName unless defined GetCommandLineOption "config";



my @targets = @ARGV;



######################
#  Read sync_config  #
######################

DEBUGMSG sprintf "Looking for config file '%s'.\n", GetCommandLineOption "config";

ERRORMSG sprintf "Configuration file '%s' not found!\n", GetCommandLineOption "config" unless -f GetCommandLineOption "config";

my $sync_config = XMLin(GetCommandLineOption "config",
                        ForceContent => 1,
                        KeyAttr => [],
                        ForceArray => [ "programs", "config", "misc", "target" ],
                        NormalizeSpace => 2);

DEBUGMSG sprintf "sync_config:\n%s\n", Dumper \$sync_config;
DEBUGMSG sprintf "targets:\n%s\n", Dumper \@targets;

if (defined GetCommandLineOption "list")
{
    my $max_target_length = 0;
    sub max($$) { my ($a, $b) = @_; return $a > $b ? $a : $b; }
    map { $max_target_length = max $max_target_length, length $$_{'name'}; } @{$$sync_config{'target'}};
    my $format_string = sprintf "%%-%ds   %%s\n", $max_target_length;

    map { printf "$format_string", $$_{'name'}, $$_{'hostname'}{'content'} } @{$$sync_config{'target'}};
    exit 0;
}

foreach my $target (@targets)
{
    ERRORMSG sprintf "Target '%s' not found!\n", $target unless grep { $$_{'name'} eq $target } @{$$sync_config{'target'}};
}

my $global_hostname = ${$$sync_config{'hostname'}}{'content'};
my $global_username = ${$$sync_config{'username'}}{'content'};

DEBUGMSG sprintf "Global hostname set to '%s'.\n", $global_hostname if defined $global_hostname;
DEBUGMSG sprintf "Global username set to '%s'.\n", $global_username if defined $global_username;

my $global_bin = ${$$sync_config{'directories'}}{'bin'}{'content'};
my $global_lib = ${$$sync_config{'directories'}}{'lib'}{'content'};
my $global_etc = ${$$sync_config{'directories'}}{'etc'}{'content'};

DEBUGMSG sprintf "Global bin target directory set to '%s'.\n", $global_bin if defined $global_bin;
DEBUGMSG sprintf "Global lib target directory set to '%s'.\n", $global_lib if defined $global_lib;
DEBUGMSG sprintf "Global etc target directory set to '%s'.\n", $global_etc if defined $global_etc;



#####################################
#  Transferfunction for file lists  #
#####################################

sub Transfer($$$$$)
{
    my ($hostname, $username, $directory, $sub_directory, $files) = @_;

    $directory = "" unless defined $directory;    
    $directory .= "/" if $directory ne "";
    $directory .= $sub_directory if defined $sub_directory;
    $username .= "@" if defined $username;
    $hostname .= ":" if defined $hostname;

    my $rsync_options = "-avP";
    $rsync_options .= "n" if defined GetCommandLineOption "simulate";

    my $command = sprintf "rsync %s --exclude=.svn --rsync-path='mkdir -p %s && rsync' %s %s%s%s", $rsync_options, $directory, $files, $username, $hostname, $directory;
    DEBUGMSG sprintf "command = '%s'\n", $command;
    system $command;
    ERRORMSG "Sync failed!\n" if $?;
}



#####################
#  Process targets  #
#####################

my $check_host = Net::Ping->new();
foreach my $target (@{$$sync_config{'target'}})
{
    my %target = %{$target};

    DEBUGMSG Dumper \%target;

    next if @targets and not grep { $target{'name'} eq $_ } @targets;

    INFOMSG sprintf "Processing target '%s' ...\n", $target{'name'};

    DEBUGMSG sprintf "target:\n%s\n", Dumper \%target;

    my $hostname = $target{'hostname'}{'content'};
    my $username = $target{'username'}{'content'};
    $hostname = $global_hostname unless defined $hostname;
    $username = $global_username unless defined $username;

    DEBUGMSG sprintf "hostname = '%s'.\n", $hostname if defined $hostname;
    DEBUGMSG sprintf "username = '%s'.\n", $username if defined $username;

    unless ($check_host->ping($hostname))
    {
        WARNMSG sprintf "Target '%s' is not reachable. Skipping.\n", $target{'name'};
        next;
    }

    my $bin = $target{'directories'}{'bin'}{'content'};
    my $lib = $target{'directories'}{'lib'}{'content'};
    my $etc = $target{'directories'}{'etc'}{'content'};
    $bin = $global_bin unless defined $bin;
    $lib = $global_lib unless defined $lib;
    $etc = $global_etc unless defined $etc;

    DEBUGMSG sprintf "bin target directory = '%s'.\n", $bin if defined $bin;
    DEBUGMSG sprintf "lib target directory = '%s'.\n", $lib if defined $lib;
    DEBUGMSG sprintf "etc target directory = '%s'.\n", $etc if defined $etc;

    my @libraries;
    foreach my $transfer_block ((@{$target{'programs'}}, @{$$sync_config{'programs'}}))
    {
        my @binaries;
        DEBUGMSG Dumper \$transfer_block;
        ERRORMSG "Found empty transfer block!\n" unless defined $$transfer_block{'content'}; 
        foreach my $source (split " ", $$transfer_block{'content'})
        {
#            my $binary = $source =~ /\// ? $source : sprintf "%s", map { chomp; $_ } `which $source 2> /dev/null`;
            my $binary = sprintf "%s", map { chomp; $_ } `which $source 2> /dev/null`;
            ERRORMSG sprintf "Can not find program '%s'!\n", $source if $binary eq "";
            push @binaries, $binary;
            foreach (split "\n", `ldd $binary`)
            {
                s/^\s*//;
                ERRORMSG sprintf "Can not resolve all dependencies. Try a rebuild and check your environment.\n" if /=> not found/;
                next unless /^lib(rrlib|finroc)/;
                my $library = $1 if /=> (\S+)/;
                push @libraries, $library if defined $library;
            }
        }

        Transfer $hostname, $username, $bin, $$transfer_block{'subdir'}, join " ", @binaries if @binaries;
    }

    my %seen;
    Transfer $hostname, $username, $lib, undef, join " ", grep { !$seen{$_}++ } @libraries if @libraries;

    foreach my $transfer_block ((@{$target{'config'}}, @{$$sync_config{'config'}}))
    {
        DEBUGMSG Dumper \$transfer_block;

        my $prefix = "";
        $prefix = sprintf "%s/", $$transfer_block{'relative_to'} if defined $$transfer_block{'relative_to'};
        $prefix = sprintf "$MCAPROJECTHOME/etc/%s", $prefix unless $prefix =~ /^\//;

        ERRORMSG "Found empty transfer block!\n" unless defined $$transfer_block{'content'}; 
        my @files = split " ", $$transfer_block{'content'};

        Transfer $hostname, $username, $etc, $$transfer_block{'subdir'}, join " ", map { "$prefix$_" } @files if @files;
    }

    foreach my $transfer_block ((@{$target{'misc'}}, @{$$sync_config{'misc'}}))
    {
        DEBUGMSG Dumper \$transfer_block;

        my $prefix = "";
        $prefix = sprintf "%s/", $$transfer_block{'relative_to'} if defined $$transfer_block{'relative_to'};

        ERRORMSG "Found empty transfer block!\n" unless defined $$transfer_block{'content'}; 
        my @files = split " ", $$transfer_block{'content'};

        Transfer $hostname, $username, "", $$transfer_block{'subdir'}, join " ", map { "$prefix$_" } @files if @files;
    }

    INFOMSG "Done.\n";
}



exit 0;
