#!/usr/bin/perl -w

# You received this file as part of Finroc
# A framework for integrated robot control
# 
# Copyright (C) Finroc GbR (finroc.org)
# 
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 2
# of the License, or (at your option) any later version.
# 
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
# 
#----------------------------------------------------------------------
# \file    finroc_analyze_code_bloat
#
# \author  Max Reichardt
#
# \date    2011-04-07
#
# Script to analyze code bloat.
# Call on any .o, .so or executable file.
# It lists all functions in this file, beginning with the largest.
# It is significantly inspired by Josh Haberman's post http://stackoverflow.com/questions/2918414/c-templates-convincing-self-against-code-bloat
#----------------------------------------------------------------------

use strict;

# use different directory, if provided
unless (@ARGV > 0) {
    print "finroc_analyze_code_bloat <.o/.so/executable file>";
    exit 0;
}

my @list;
my $total = 0;
foreach my $line (`nm --demangle -S $ARGV[0]`) {
        if ($line =~ /^[0-9a-f]*\s([0-9a-f]*)\s\w\s(.*)$/) {
        push (@list, {size =>hex($1), name =>$2 });
            $total += hex($1);
    }
}

foreach my $line (sort { $b->{size} <=> $a->{size} } @list) {
        my $percent = ($line->{size} / $total) * 100;
        my $pstr = substr $percent, 0, 4;
        print "$pstr%  $line->{size}  $line->{name}\n"
}
