#!/usr/bin/perl -w

# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 2
# of the License, or (at your option) any later version.
# 
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
# 
#----------------------------------------------------------------------
# \file    svnall
#
# \author  Norbert Schmitz
# \author  Tim Braun
# \author  Tobias Foehst
#
# \date    2007-06-01
#
#----------------------------------------------------------------------

use strict;

use Cwd;

if ($#ARGV < 0) {
    print "usage: svnall <svn-arguments>\n";
    print "\nthe command \"svn <svn-arguments>\" will be executed in all\n";
    print "SVN-repositories present in any sub-directory of the current dir.\n";
    exit;
}

my %repos = ();
my %repos_dir = ();

my @svndirs = `find . -type d -name .svn -print`;
my $svndir = "";

foreach $svndir (@svndirs) {
    $svndir =~ s/\/.svn\s+$//;   # remove trailing '.svn' and newline 
    # save dir and cd into new one
    my $currentdir = getcwd;
    chdir "$svndir";
    my @svninfo = `svn info --xml`;
    
    # clear variables
    my $url = "";
    my $root = "";

    # parse svn info output
    foreach my $line (@svninfo) {
	if ( $line =~ /<uuid>/ ) {
	    $line =~ s/<uuid>//;
	    $line =~ s/<\/uuid>//;
            $line =~ s/\s+$//;
	    $root = $line;
	}
	if ( $line =~ /<url>/ ) {
	    $line =~ s/<url>//;
	    $line =~ s/<\/url>//;
            $line =~ s/\s+$//;
	    $url = $line;
	}
    }
    
    # save results in hashes
    if ( ( length($url) > 0 ) && ( length($root) > 0 ) ) { 
	if ( exists($repos{$root}) ) {
	    if ( length($url) < length($repos{$root}) ) {
		$repos{$root} = $url;
		$repos_dir{$root} = getcwd;
	    }
	}
	else {
	    $repos{$root} = $url;
	    $repos_dir{$root} = getcwd;
	}
    }
    
    # cd back
    chdir "$currentdir";
}
my @globbed_args;
my %conflicts;
# call svn ... in all important dirs
while ( my ($key, $value) = each(%repos) )
{
    print "\nsub-repository: ".$value." at ".$repos_dir{$key}." \n" ;
    
    my $currentdir = getcwd;
    chdir "$repos_dir{$key}";
    @globbed_args = ();
    foreach my $arg (@ARGV) {
    @globbed_args = (@globbed_args, glob($arg));
     #print " @globbed_args\n";
    }
    print "calling \"svn @globbed_args\"\n";
    open SVNOUTPUT, "svn @globbed_args |";
    my $conflicts = 0;
    while (<SVNOUTPUT>) {
	print;
	$conflicts++ if /^\s*C\s+/;
    }
    $conflicts{$repos_dir{$key}} = $conflicts if $conflicts > 0;
    chdir "$currentdir";
}

# tell about conflicts
print "\n" if scalar keys %conflicts;
foreach my $dir_name (keys %conflicts) {
    printf "There %s %d conflict%s at %s\n", $conflicts{$dir_name} == 1 ? "is" : "are", $conflicts{$dir_name}, $conflicts{$dir_name} == 1 ? "" : "s", $dir_name;
}
