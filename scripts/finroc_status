#!/usr/bin/perl -w

# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 2
# of the License, or (at your option) any later version.
# 
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
# 
#----------------------------------------------------------------------
# \file    finroc_status
#
# \author  Tobias Foehst
#
# \date    2011-06-30
#
#----------------------------------------------------------------------

use strict;

use Env '$FINROC_HOME';
use Data::Dumper;

use lib "$FINROC_HOME/scripts/perl";
use FINROC::messages;
use FINROC::getopt;
use FINROC::sources;
use FINROC::rcs;
use FINROC::terminal;

############################
##  Command line options  ##
############################

SetHelp undef,
{
    "-l, --local-modifications-only" => "do not check for outgoing changesets (much faster)",
    "-i, --incoming" => "show also working copies with incoming changesets"
}, undef;

ParseCommandLine [ "local-modifications-only", "incoming" ], undef;



####################
##  Check status  ##
####################

my $status = "";

sub CheckStatus($)
{
    my ($directory) = @_;

    return unless -d $directory;

    DEBUGMSG sprintf "%s\n", $directory;

    my $result = Status $directory, defined GetCommandLineOption "local-modifications-only" ? 1 : 0, defined GetCommandLineOption "incoming" ? 1 : 0;

    $directory =~ s/$FINROC_HOME/\$FINROC_HOME/;

    $status .= sprintf "Status of %s:\n%s\n", $directory, $result if $result ne "";
}



#########################
##  Search components  ##
#########################

my @directories;
sub AddDirectory($)
{
    my ($directory) = @_;
    push @directories, $directory if -d $directory;
}

AddDirectory "$FINROC_HOME/make_builder";

map { chomp; AddDirectory $_ } `find $FINROC_HOME/sources -maxdepth 4 -name "core" 2> /dev/null`;

my @classes = ( "rrlib", "libraries", "tools", "plugins", "projects" );

foreach my $class (@classes)
{
    foreach my $base (map { chomp; $_ } `find $FINROC_HOME/sources -name "$class" 2> /dev/null`)
    {
        map { chomp; AddDirectory sprintf "%s/%s", $base, $_ } `ls $base`;
    }
}

AddDirectory "$FINROC_HOME";

my $prompt = sprintf "Checking status of working copies%s: [", defined GetCommandLineOption "local-modifications-only" ? "" : " and repositories";
INFOMSG $prompt;
DEBUGMSG "\n";

my $i = 0;
my $format_string = sprintf "%%%dd/%d", length "".scalar @directories, scalar @directories;
foreach my $directory (@directories)
{
    my $progress = sprintf $format_string, ++$i, scalar @directories;

    INFOMSG sprintf "%s] %s", $progress, ClearEndOfLineSequence;
    my $current_output = $directory;
    $current_output =~ s/$FINROC_HOME/\$FINROC_HOME/;
    INFOMSG $current_output;
    CheckStatus $directory;
    INFOMSG MoveCursorInRowSequence -(2 + length($current_output) + length($progress));
}
INFOMSG sprintf "$format_string] Done%s\n", scalar @directories, ClearEndOfLineSequence;

INFOMSG "\n$status" if $status ne "";



exit 0;
