#!/usr/bin/perl -w

# You received this file as part of Finroc
# A framework for integrated robot control
# 
# Copyright (C) Finroc GbR (finroc.org)
# 
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 2
# of the License, or (at your option) any later version.
# 
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
# 
#----------------------------------------------------------------------
# \file    finroc_status
#
# \author  Tobias Foehst
#
# \date    2011-06-30
#
#----------------------------------------------------------------------

use strict;

use Env '$FINROC_HOME';
use Data::Dumper;

use lib "$FINROC_HOME/scripts/perl";
use FINROC::messages;
use FINROC::getopt;
use FINROC::sources;
use FINROC::scm;
use FINROC::components;

############################
##  Command line options  ##
############################

SetHelp "[<directory>]",
{
    "-l, --local-modifications-only" => "do not check for outgoing changesets (much faster)",
    "-i, --incoming" => "show also working copies with incoming changesets",
    "-c, --check" => "check which components are checked out and at what local state",
    "-u <username>, --username=<username>" => "use <username> to get access to repositories",
    "-p <password>, --password=<password>" => "use <password> to get access to repositories"
}, "If specified, only repositories below <directory> are inspected.";

ParseCommandLine [ "local-modifications-only", "incoming", "check", "username=s", "password=s" ], sub
{
    if (GetCommandLineOption "check" and (GetCommandLineOption "local-modifications-only" or GetCommandLineOption "incoming"))
    {
        ERRORMSG "--check can not be used together with --incoming or --local-modifications-only!\n";
    } 
};

my $root = $ARGV[0] if defined $ARGV[0];

if (defined $root)
{
    $root = sprintf "%s/%s", join("", map { chomp; $_} `pwd`), $root unless $root =~ /^\//;
    $root =~ s/\/\.\//\//g;
    $root =~ s/\/\//\//g;
    $root =~ s/\/\.$//g;
    $root =~ s/\/$//g;

    ERRORMSG "<directory> must be below \$FINROC_HOME!\n" unless $FINROC_HOME eq substr $root, 0, length $FINROC_HOME;

    INFOMSG "Checking only repositories below $root\n";
}



##############################
##  Hidden password prompt  ##
##############################

my $username = GetCommandLineOption "username";
my $password = GetCommandLineOption "password";

if (defined $username and not defined $password)
{
    use Term::ReadKey;
    ReadMode 'noecho';
    INFOMSG "username: $username\n";
    INFOMSG "password: ";
    $password = <STDIN>;
    ReadMode 'restore';
    INFOMSG "\n";
    chomp $password;
}



#########################
##  Search components  ##
#########################

my %directories;
sub AddDirectory($)
{
    my ($directory) = @_;
    return unless -d $directory;
    return if defined $root and $root ne substr $directory, 0, length $root;

    $directories{$directory} = 1;
}

sub AddSubtreeRepositoryRoot()
{
    return unless defined $root;

    my $directory = $root;

    while (length $directory > length $FINROC_HOME)
    {
        my $component = $1 if $directory =~ s/\/([^\/]+)$//;

        if (grep { my $pattern = qr/$_$/; $directory =~ $pattern } ( "rrlib", "libraries", "tools", "plugins", "projects", "sources/cpp", "sources/java/org/finroc" ))
        {
            $directories{sprintf "%s/%s", $directory, $component} = 1;
            return;
        }
    }
    ERRORMSG "Fatal error!\n" if $directory ne $FINROC_HOME;
    $directories{"$FINROC_HOME"} = 1;
}

AddDirectory "$FINROC_HOME/make_builder";

map { chomp; AddDirectory $_ } `find "$FINROC_HOME/sources" -maxdepth 4 -name "core" 2> /dev/null`;

my @classes = ( "rrlib", "libraries", "tools", "plugins", "projects" );

foreach my $class (@classes)
{
    foreach my $base (map { chomp; $_ } `find "$FINROC_HOME/sources" -name "$class" 2> /dev/null`)
    {
        map { chomp; AddDirectory sprintf "%s/%s", $base, $_ } `ls "$base"`;
    }
}

AddDirectory "$FINROC_HOME";

AddSubtreeRepositoryRoot;



########################
##  Check components  ##
########################

if (GetCommandLineOption "check")
{
    my @components = grep { defined } map { GetComponentNameFromDirectory $_ } keys %directories;
    foreach (@components)
    {
        printf "%s\n", $_;
    }
    exit 0;
}

my $i = 0;
my $format_string = sprintf "%%%dd/%d", length "".scalar keys %directories, scalar keys %directories;
foreach my $directory (sort keys %directories)
{
    my $progress = sprintf $format_string, ++$i, scalar keys %directories;

    my $directory_name = $directory;
    $directory_name =~ s/$FINROC_HOME/\$FINROC_HOME/;

    INFOMSG sprintf " [%s] %s\n", $progress, $directory_name;

    my $status = Status $directory, defined GetCommandLineOption "local-modifications-only", defined GetCommandLineOption "incoming", $username, $password;
    INFOMSG $status unless $status eq "Unmanaged";
}



exit 0;
    