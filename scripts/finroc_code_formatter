#!/usr/bin/perl -w

# You received this file as part of Finroc
# A framework for intelligent robot control
#
# Copyright (C) Finroc GbR (finroc.org)
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License along
# with this program; if not, write to the Free Software Foundation, Inc.,
# 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
#
#----------------------------------------------------------------------
# \file    finroc_code_formatter
#
# \author  Tobias Foehst
#
# \date    2010-04-14
#
# Reformats source code files using astyle to assert a unified format of
# committed code. This is for example helpful to generate meaningful
# diffs between revisions.
#
#----------------------------------------------------------------------

use strict;

use Env '$FINROC_HOME';
use File::Basename;
use Data::Dumper;

use lib "$FINROC_HOME/scripts/perl";
use FINROC::messages;
use FINROC::getopt;
use FINROC::scm;

my $astyle_version = `astyle --version 2>&1` or ERRORMSG sprintf "\nCould not execute astyle: %s\n\n", $!;
ERRORMSG sprintf "\nWrong astyle version. Please use %s\n", `cat "$FINROC_HOME/etc/astyle.version"` if $astyle_version ne `cat "$FINROC_HOME/etc/astyle.version"`;

my %format_flags;
$format_flags{"cpp"}  = "--style=ansi --indent-preprocessor --indent=spaces=2 --min-conditional-indent=0 --close-templates";
$format_flags{"c"}    = $format_flags{"cpp"};
$format_flags{"cc"}   = $format_flags{"cpp"};
$format_flags{"cu"}   = "--style=ansi --indent-preprocessor --indent=spaces=2 --min-conditional-indent=0";
$format_flags{"cuh"}  = $format_flags{"cu"};
$format_flags{"h"}    = $format_flags{"cpp"};
$format_flags{"hpp"}  = $format_flags{"cpp"};
$format_flags{"java"} = "--mode=java --style=java";
my $shared_flags = "--convert-tabs --pad-oper --unpad-paren --pad-header --lineend=linux";


############################
##  Command line options  ##
############################

SetHelp "[<filenames>]",
{
    "-a, --all" => "process all files (not only modified)",
    "-f, --force" => "do not ask before reformatting"
}, "<filenames> can be an explicit list of files to reformat";

ParseCommandLine [ "all", "force" ], undef;



###################
#  Collect files  #
###################

my %files;

sub FileRelevant($)
{
    my ($filename) = @_;
    return 0 unless -f $filename;

    my $extension = (reverse split '\.', $filename)[0];
    return 0 unless exists $format_flags{lc $extension};
    return 1;
}

sub CollectFilesFromCommandLine()
{
    DEBUGMSG "Collecting files from command line ...\n";

    foreach my $filename (@ARGV)
    {
        $files{$filename} = 1 if FileRelevant $filename;
    }
}

sub CollectModifiedFiles()
{
    my $directory = join "", map { chomp; $_ } `pwd`;

    until (IsWorkingCopyRoot $directory || $directory eq "/")
    {
        $directory = dirname $directory;
    }
    DEBUGMSG sprintf "Collecting only modified files in '%s'...\n", $directory;

    foreach my $line (split "\n", Status $directory, 1, 0, undef, undef)
    {
        $line =~ s/\s+(\+\s+)?/ /;
        my ($status, $filename) = split " ", $line;
        next unless $status =~ /^[AMR]$/;
        $files{$filename} = 1 if FileRelevant $filename;
    }
}

sub CollectAllFiles()
{
    DEBUGMSG "Collecting all relevant files ...\n";

    foreach my $filename (split "\0", `find . -type f -print0 2> /dev/null`)
    {
        $files{$filename} = 1 if FileRelevant $filename;
    }
}

sub CollectFiles()
{
    CollectAllFiles if defined GetCommandLineOption "all";
    return CollectFilesFromCommandLine if scalar @ARGV;
    return CollectModifiedFiles unless defined GetCommandLineOption "all";
}

CollectFiles;

DEBUGMSG sprintf "collected files:\n%s\n", Dumper \%files;



if (scalar keys %files == 0)
{
    INFOMSG "Nothing to do.\n";
    exit 0;
}



####################
#  Reformat files  #
####################

unless (defined GetCommandLineOption "force")
{
    INFOMSG "Found files:\n";
    foreach my $filename (sort keys %files)
    {
        INFOMSG "\t$filename\n";
    }

    INFOMSG "\nPress ENTER to start auto-formatting files or CRTL-C to abort.\n";
    <STDIN>;
}

my $changes = 0;
foreach my $filename (sort keys %files)
{
    my $extension = (reverse split '\.', $filename)[0];
    ERRORMSG sprintf "No format flags specified for extension %s!\n", $extension unless defined $format_flags{lc $extension};
    my $command = sprintf "astyle --suffix=.original --options=none %s %s '%s'", $format_flags{lc $extension}, $shared_flags, $filename;

    DEBUGMSG sprintf "Executing '%s'\n", $command;
    my $message = `$command`;
    ERRORMSG "Error during execution of astyle!\n" if $?;
    $changes += INFOMSG $message if $message =~ /^formatted /i;
    unlink "$filename.original"
}

INFOMSG sprintf "%s\n", $changes ? "\nDone. Please recompile to check for errors." : "Done. No changes were made.";



exit 0;
