#!/usr/bin/perl -w

# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 2
# of the License, or (at your option) any later version.
# 
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
# 
#----------------------------------------------------------------------
# \file    finroc_get
#
# \author  Tobias Foehst
#
# \date    2010-04-07
#
#----------------------------------------------------------------------

use strict;

use Env '$FINROC_HOME';
use Data::Dumper;

use lib "$FINROC_HOME/scripts/perl";
use FINROC::messages;
use FINROC::getopt;
use FINROC::sources;
use FINROC::rcs;

############################
##  Command line options  ##
############################

SetHelp "<repository_list>",
{
    "-o [yes|no], --optional=[yes|no]" => "get optional dependencies? - default: ask",
    "-u <username>, --username=<username>" => "use <username> to get access to repositories",
    "-p <password, --password=<password>" => "use <password> to get access to repositories"
}, undef;

ParseCommandLine [ "optional=s", "username=s", "password=s" ], sub
{
    if (defined GetCommandLineOption "optional")
    {
        ERRORMSG "Possible values for --optional: yes|no\n" unless (GetCommandLineOption "optional") =~ /yes|no/;
    }
};

# non-optional arguments
ERRORMSG sprintf "<repository_list> not specified. Use %s --help for more information.\n", ScriptName unless defined $ARGV[0];

# default values if not set
AssignCommandLineOptionDefaultValue "optional", "ask" unless defined GetCommandLineOption "optional" and GetCommandLineOption "optional" ne "";



####################################
##  Process requested components  ##
####################################

my %requested_components;
my %not_found_components;

my %seen;
foreach my $component_name (grep { !$seen{$_}++ } @ARGV)
{
    my %component = GetComponent $component_name;
    ${%component ? \%requested_components : \%not_found_components}{$component_name} = 1;
}

ERRORMSG sprintf "Could not find requested component%s: %s!\n", keys %not_found_components == 1 ? "" : "s", join ", ", keys %not_found_components if keys %not_found_components;



##############################
##  Determine dependencies  ##
##############################

my %mandatory_components;
my %optional_components;

sub GetComponentDirectory($)
{
    my ($component_name) = @_;
    
    return "make_builder" if $component_name eq "make_builder";

    my @name_parts = split "-", $component_name;
    ERRORMSG sprintf "Invalid number of '-' in source component '%s'\n", $component_name if scalar @name_parts > 2;
    my $language = scalar @name_parts == 2 ? $name_parts[1] : "cpp";
    my $directory = $name_parts[0];

    $directory =~ s/^rrlib_/rrlib\//;
    $directory =~ s/^finroc_plugins_/finroc\/plugins\//;
    $directory =~ s/^finroc_libraries_/finroc\/libraries\//;
    $directory =~ s/^finroc_tools_gui_plugins_/finroc\/tools\/gui\/plugins\//;
    $directory =~ s/^finroc_tools_/finroc\/tools\//;
    $directory =~ s/^finroc_projects_/finroc\/projects\//;

    return sprintf "sources/%s/%s", $language, $directory;
}

sub AddComponent($$);
sub AddComponent($$)
{
    my ($component_name, $list) = @_;

    return if exists $$list{$component_name} or exists $mandatory_components{$component_name};

    DEBUGMSG sprintf "Adding component %s\n", $component_name;
    
    my %component = GetComponent $component_name;

    $$list{$component_name} = { 'url' => $component{'url'}, 'target' => GetComponentDirectory $component_name };
    ${$$list{$component_name}}{'installed'} = -d ${$$list{$component_name}}{'target'};

    if (defined $component{'dependencies'})
    {
        foreach my $dependency_name (split " ", join " ", @{$component{'dependencies'}})
        {
            AddComponent $dependency_name, $list;
        }
    }

    if (defined $component{'optional_dependencies'})
    {
        foreach my $dependency_name (split " ", join " ", @{$component{'optional_dependencies'}})
        {
            AddComponent $dependency_name, \%optional_components;
        }
    }
}

sub FixImplicitDependencies()
{
    foreach my $component_name (keys %mandatory_components)
    {
        AddComponent "make_builder", \%mandatory_components;
        AddComponent "finroc_tools_gui%s", defined $1 ? $1 : "" if $component_name =~ /^finroc_tools_gui_[^-]+(-\S+)?/;
    }
}

INFOMSG "Building dependency tree... ";
DEBUGMSG "\n";

my $pad_first_question = "\n";

map { AddComponent $_, \%mandatory_components } keys %requested_components;

FixImplicitDependencies;
map { delete $optional_components{$_} } keys %mandatory_components;

sub AskForOptionalComponent($)
{
    my ($component_name) = @_;

    INFOMSG sprintf "%sGet optional component '%s'? [y/N] ", $pad_first_question, $component_name;
    $pad_first_question = "";
    return <STDIN> =~ /^y/;
}

while (keys %optional_components)
{
    if (keys %optional_components)
    {
        my $candidate_name = @{[ sort keys %optional_components ]}[0];

        if (   ${$optional_components{$candidate_name}}{'installed'}
            or GetCommandLineOption "optional" eq "yes"
            or (GetCommandLineOption "optional" eq "ask" and AskForOptionalComponent $candidate_name))
        {
            AddComponent $candidate_name, \%mandatory_components
        }
        delete $optional_components{$candidate_name};
    }

    FixImplicitDependencies;
    map { delete $optional_components{$_} } keys %mandatory_components;
}

map { delete $mandatory_components{$_} if ${$mandatory_components{$_}}{'installed'} } keys %mandatory_components;

INFOMSG "Done.\n";



my @missing_mandatory_dependencies = grep { !defined ${$mandatory_components{$_}}{'url'} } keys %mandatory_components;
ERRORMSG sprintf "Could not resolve mandatory dependencies:\n  %s\n", join " ", @missing_mandatory_dependencies if @missing_mandatory_dependencies;



my %extra_components;
map { $extra_components{$_} = 1 unless $requested_components{$_} } keys %mandatory_components;

INFOMSG sprintf "The following extra components will be installed:\n  %s\n", join " ", sort keys %extra_components if keys %extra_components;
INFOMSG sprintf "The following NEW components will be installed:\n  %s\n", join " ", sort keys %mandatory_components;

if (keys %extra_components)
{
    INFOMSG "Do you want to continue? [Y/n] ";
    if (<STDIN> =~ /^n/)
    {
        INFOMSG "Abort.\n";
        exit 0;
    }
}



###########################
##  Checkout components  ##
###########################

foreach my $component_name (sort keys %mandatory_components)
{
    my %component = %{$mandatory_components{$component_name}};

    DEBUGMSG sprintf "About to checkout component '%s' from '%s'\n", $component_name, $component{'url'};

    my $rcs_name = @{[ reverse split "/", $component{'url'} ]}[1];
    require "FINROC/rcs/$rcs_name.pm";
    
    Checkout $component{'url'}, "$FINROC_HOME/$component{'target'}", GetCommandLineOption "username", GetCommandLineOption "password";
}



exit 0;
