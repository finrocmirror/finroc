#!/usr/bin/perl -w

# You received this file as part of Finroc
# A framework for intelligent robot control
# 
# Copyright (C) Finroc GbR (finroc.org)
# 
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 2
# of the License, or (at your option) any later version.
# 
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
# 
#----------------------------------------------------------------------
# \file    finroc_get
#
# \author  Tobias Foehst
#
# \date    2010-04-07
#
#----------------------------------------------------------------------

use strict;

use Env '$FINROC_HOME';
use Data::Dumper;

use lib "$FINROC_HOME/scripts/perl";
use FINROC::messages;
use FINROC::getopt;
use FINROC::sources;
use FINROC::components;
use FINROC::scm;
use FINROC::utilities;

############################
##  Command line options  ##
############################

SetHelp "<repository_list>",
{
    "-o [yes|no], --optional=[yes|no]" => "get optional dependencies? - default: ask",
    "-u <username>, --username=<username>" => "use <username> to get access to repositories",
    "-p <password>, --password=<password>" => "use <password> to get access to repositories",
    "-y, --yes" => "automatic yes to all prompts for non-interactive contexts"
}, undef;

ParseCommandLine [ "optional=s", "username=s", "password=s", "yes" ], sub
{
    if (defined GetCommandLineOption "optional")
    {
        ERRORMSG "Possible values for --optional: yes|no\n" unless (GetCommandLineOption "optional") =~ /^(yes|no)$/;
    }
};

# non-optional arguments
ERRORMSG sprintf "<repository_list> not specified. Use %s --help for more information.\n", ScriptName unless defined $ARGV[0];

# default values if not set
AssignCommandLineOptionDefaultValue "optional", "ask";



####################################
##  Process requested components  ##
####################################

my %requested_components;
my %not_found_components;

my %seen;
foreach my $component_name (grep { !$seen{$_}++ } @ARGV)
{
    my %component = GetComponent $component_name;
    ${%component ? \%requested_components : \%not_found_components}{$component_name} = 1;
}

ERRORMSG sprintf "Could not find requested component%s: %s!\n", keys %not_found_components == 1 ? "" : "s", join ", ", keys %not_found_components if keys %not_found_components;



##############################
##  Hidden password prompt  ##
##############################

my $username = GetCommandLineOption "username";
my $password = GetCommandLineOption "password";

if (defined $username and not defined $password)
{
    use Term::ReadKey;
    ReadMode 'noecho';
    INFOMSG "username: $username\n";
    INFOMSG "password: ";
    $password = <STDIN>;
    ReadMode 'restore';
    INFOMSG "\n";
    chomp $password;
}



##############################
##  Determine dependencies  ##
##############################

my %mandatory_components;
my %optional_components;

sub AddComponent($$$);
sub AddComponent($$$)
{
    my ($component_name, $list, $force) = @_;

    DEBUGMSG sprintf "AddComponent(name=%s, list=%s, force=%s) called\n", $component_name, ($list == \%mandatory_components ? "mandatory" : "optional"), $force;

    return if (exists $$list{$component_name} or exists $mandatory_components{$component_name}) and not $force;

    DEBUGMSG sprintf "Adding component %s\n", $component_name;

    my %component = GetComponent $component_name;

    $$list{$component_name} = { 'url' => $component{'url'}, 'target' => ${ComponentInfo $component_name}{'directory'}, 'disk_usage' => $component{'disk_usage'} };
    ${$$list{$component_name}}{'installed'} = -d "$FINROC_HOME/${$$list{$component_name}}{'target'}";
    unless ($force)
    {
        my $release_description = `lsb_release -d`;
        if ($release_description =~ /(debian|buntu)/i)
        {
            my $debian_name = $component_name;
            $debian_name =~ s/_/-/g;
            $debian_name = sprintf "lib%s", $debian_name if ${ComponentInfo $component_name}{'type'} eq "lib";
            $debian_name = sprintf "%s-dev", $debian_name if ${ComponentInfo $component_name}{'language'} eq "cpp";
            my $package_info = join "", map { chomp; $_ } `dpkg -l $debian_name 2> /dev/null | grep $debian_name | awk '{print \$1}'`;
            ${$$list{$component_name}}{'installed'} |= $package_info eq "ii";
            DEBUGMSG sprintf "%s is already installed.\n", $component_name if ${$$list{$component_name}}{'installed'};
        }
    }

    if (defined $component{'dependencies'})
    {
        foreach my $dependency_name (split " ", $component{'dependencies'})
        {
            AddComponent $dependency_name, $list, 0;
        }
    }

    if (defined $component{'optional_dependencies'})
    {
        foreach my $dependency_name (split " ", $component{'optional_dependencies'})
        {
            AddComponent $dependency_name, \%optional_components, 0;
        }
    }
}

sub FixImplicitDependencies()
{
    foreach my $component_name (keys %mandatory_components)
    {
        AddComponent "make_builder", \%mandatory_components, 0;
        AddComponent sprintf("finroc_tools_gui%s", defined $1 ? $1 : ""), \%mandatory_components, 0 if $component_name =~ /^finroc_tools_gui_[^-]+(-\S+)?/;
    }
}

INFOMSG "Building dependency tree... ";
DEBUGMSG "\n";

my $pad_first_question = "\n";

map { AddComponent $_, \%mandatory_components, 1 } keys %requested_components;

FixImplicitDependencies;
map { delete $optional_components{$_} } keys %mandatory_components;

sub AskForOptionalComponent($)
{
    my ($component_name) = @_;

    INFOMSG sprintf "%sGet optional component '%s'? [y/N] ", $pad_first_question, $component_name;
    $pad_first_question = "";
    return <STDIN> =~ /^y/;
}

while (keys %optional_components)
{
    if (keys %optional_components)
    {
        my $candidate_name = @{[ sort keys %optional_components ]}[0];

        if (   ${$optional_components{$candidate_name}}{'installed'}
            or GetCommandLineOption "optional" eq "yes"
            or (GetCommandLineOption "optional" eq "ask" and (defined GetCommandLineOption "yes" or AskForOptionalComponent $candidate_name)))
        {
            AddComponent $candidate_name, \%mandatory_components, 0;
        }
        delete $optional_components{$candidate_name};
    }

    FixImplicitDependencies;
    map { delete $optional_components{$_} } keys %mandatory_components;
}

map { delete $mandatory_components{$_} if ${$mandatory_components{$_}}{'installed'} } keys %mandatory_components;

INFOMSG "Done.\n";



my @missing_mandatory_dependencies = grep { !defined ${$mandatory_components{$_}}{'url'} } keys %mandatory_components;
ERRORMSG sprintf "Could not resolve mandatory dependencies:\n  %s\n", join " ", @missing_mandatory_dependencies if @missing_mandatory_dependencies;



if (!keys %mandatory_components)
{
    INFOMSG sprintf "Nothing new to install.\n";
    exit 0;
}



my %extra_components;
map { $extra_components{$_} = 1 unless $requested_components{$_} } keys %mandatory_components;

INFOMSG sprintf "The following extra components will be installed:\n  %s\n", join " ", sort keys %extra_components if keys %extra_components;

INFOMSG sprintf "The following new components will be installed:\n  %s\n", join " ", sort keys %mandatory_components;

sub FormatSummarizedDiskUsage($)
{
    my ($used_amounts) = @_;
    my $usage = 0;
    my $undef_seen = 0;
    map { $usage += $_ if defined; $undef_seen = 1 unless defined; } @$used_amounts;
    my @suffices = ( "KiB", "MiB", "GiB", "TiB" );
    my $suffix = 0;
    while ($usage > 1024)
    {
        $usage /= 1024.0;
        $suffix++;
    }
    return sprintf "%s%.1f %s", $undef_seen ? "at least " : "", int($usage * 10.0 + 0.5) / 10.0, $suffices[$suffix];
}

INFOMSG sprintf "After this operation, %s of additional disk space will be used.\n", FormatSummarizedDiskUsage [ map { $mandatory_components{$_}{'disk_usage'}; } keys %mandatory_components ];

if (keys %extra_components and not defined GetCommandLineOption "yes")
{
    INFOMSG "Do you want to continue? [Y/n] ";
    if (<STDIN> =~ /^n/)
    {
        INFOMSG "Abort.\n";
        exit 0;
    }
}



###########################
##  Checkout components  ##
###########################

ForEachWithProgress [ sort keys %mandatory_components ], sub
{
    my ($component_name) = @_;
    return sprintf "\$FINROC_HOME/%s", ${$mandatory_components{$component_name}}{'target'};
}, sub
{
    my ($component_name) = @_;
    my %component = %{$mandatory_components{$component_name}};
    DEBUGMSG sprintf "About to checkout component '%s' from '%s'\n", $component_name, $component{'url'};
    Checkout $component{'url'}, "$FINROC_HOME/$component{'target'}", $username, $password;
};



exit 0;
