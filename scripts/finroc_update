#!/usr/bin/perl -w

# You received this file as part of Finroc
# A framework for integrated robot control
# 
# Copyright (C) Finroc GbR (finroc.org)
# 
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 2
# of the License, or (at your option) any later version.
# 
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
# 
#----------------------------------------------------------------------
# \file    finroc_update
#
# \author  Tobias Foehst
#
# \date    2011-06-30
#
#----------------------------------------------------------------------

use strict;

use Env '$FINROC_HOME';
use Data::Dumper;

use lib "$FINROC_HOME/scripts/perl";
use FINROC::messages;
use FINROC::getopt;
use FINROC::sources;
use FINROC::scm;
use FINROC::components;

############################
##  Command line options  ##
############################

SetHelp undef,
{
    "-u <username>, --username=<username>" => "use <username> to get access to repositories",
    "-p <password>, --password=<password>" => "use <password> to get access to repositories"
}, undef;

ParseCommandLine [ "optional=s", "username=s", "password=s" ], undef;



##############################
##  Hidden password prompt  ##
##############################

my $username = GetCommandLineOption "username";
my $password = GetCommandLineOption "password";

if (defined $username and not defined $password)
{
    use Term::ReadKey;
    ReadMode 'noecho';
    INFOMSG "username: $username\n";
    INFOMSG "password: ";
    $password = <STDIN>;
    ReadMode 'restore';
    INFOMSG "\n";
    chomp $password;
}



#########################
##  Search components  ##
#########################

my %directories;
sub AddDirectory($)
{
    my ($directory) = @_;
    return unless -d $directory;

    $directories{$directory} = 1;
}

AddDirectory "$FINROC_HOME/make_builder";

map { chomp; AddDirectory $_ } `find -L "$FINROC_HOME/sources" -maxdepth 4 -name "core" 2> /dev/null`;

my @classes = ( "rrlib", "libraries", "tools", "plugins", "projects" );

foreach my $class (@classes)
{
    foreach my $base (map { chomp; $_ } `find -L "$FINROC_HOME/sources" -name "$class" 2> /dev/null`)
    {
        map { chomp; AddDirectory sprintf "%s/%s", $base, $_ } `ls "$base"`;
    }
}

AddDirectory "$FINROC_HOME";



######################
##  Perform update  ##
######################

my @updated;
my @conflicts;
my @modified;
my @outgoing;
my @check_dependencies;

my $i = 0;
my $format_string = sprintf "%%%dd/%d", length "".scalar keys %directories, scalar keys %directories;
foreach my $directory (sort keys %directories)
{
    my $progress = sprintf $format_string, ++$i, scalar keys %directories;

    my $directory_name = $directory;
    $directory_name =~ s/$FINROC_HOME/\$FINROC_HOME/;

    INFOMSG sprintf " [%s] %s\n", $progress, $directory_name;
    
    my $result = Update $directory, $username, $password;

    push @check_dependencies, GetComponentNameFromDirectory $directory unless $result eq "Update source not defined";
    
    INFOMSG "$result\n" if $result eq "Updated";
    WARNMSG "$result\n" if grep { $result eq $_ } ( "Conflicts", "Modified working copy", "Outgoing changesets" );

    push @updated, $directory_name if $result eq "Updated";
    push @conflicts, $directory_name if $result eq "Conflicts";
    push @modified, $directory_name if $result eq "Modified working copy";
    push @outgoing, $directory_name if $result eq "Outgoing changesets";
}



##################################
##  Check for new dependencies  ##
##################################

INFOMSG "Checking for new dependencies...\n";
if (@check_dependencies)
{
    my $check_dependencies = join " ", grep { defined and `finroc_search $_ 2>/dev/null`} @check_dependencies;
    my $credentials = "";
    $credentials .= sprintf " --username '%s'", $username if defined $username;
    $credentials .= sprintf " --password '%s'", $password if defined $password;
    DEBUGMSG sprintf "Executing '%s'\n", "finroc_get -o no -y $credentials $check_dependencies";
    system "finroc_get -o no -y $credentials $check_dependencies";
}
INFOMSG "Done.\n";



INFOMSG sprintf "The following directories were successfully updated:\n  %s\n", join " ", @updated if @updated;
WARNMSG sprintf "The following directories have incoming changesets but need manual processing due to local modifications:\n  %s\n", join " ", @modified if @modified;
WARNMSG sprintf "The following directories have incoming changesets but need manual processing due to outgoing changesets (e.g. rebase or merge):\n  %s\n", join " ", @outgoing if @outgoing;
WARNMSG sprintf "The following directories have conflicts that must be manually resolved:\n  %s\n", join " ", @conflicts if @conflicts;



exit 0;
