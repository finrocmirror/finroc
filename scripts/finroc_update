#!/usr/bin/perl -w

# You received this file as part of Finroc
# A framework for intelligent robot control
#
# Copyright (C) Finroc GbR (finroc.org)
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License along
# with this program; if not, write to the Free Software Foundation, Inc.,
# 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
#
#----------------------------------------------------------------------
# \file    finroc_update
#
# \author  Tobias Foehst
#
# \date    2011-06-30
#
#----------------------------------------------------------------------

use strict;

use Env '$FINROC_HOME';
use Data::Dumper;

use lib "$FINROC_HOME/scripts/perl";
use FINROC::messages;
use FINROC::getopt;
use FINROC::sources;
use FINROC::scm;
use FINROC::components;
use FINROC::utilities;

############################
##  Command line options  ##
############################

SetHelp undef,
{
    "-u <username>, --username=<username>" => "use <username> to get access to repositories",
    "-p <password>, --password=<password>" => "use <password> to get access to repositories"
}, undef;

ParseCommandLine [ "username=s", "password=s" ], undef;



##############################
##  Hidden password prompt  ##
##############################

my $username = GetCommandLineOption "username";
my $password = GetCommandLineOption "password";

if (defined $username and not defined $password)
{
    use Term::ReadKey;
    ReadMode 'noecho';
    INFOMSG "username: $username\n";
    INFOMSG "password: ";
    $password = <STDIN>;
    ReadMode 'restore';
    INFOMSG "\n";
    chomp $password;
}



#########################
##  Search components  ##
#########################

my %directories = FindWorkingCopyBaseFolders;



######################
##  Perform update  ##
######################

my @not_on_head;
my @updated;
my @conflicts;
my @modified;
my @heads;
my @check_dependencies;

ForEachWithProgress [ sort keys %directories ], \&EscapeFinrocHome, sub
{
    my ($directory) = @_;
    my $result = Update $directory, $username, $password;

    DEBUGMSG "Result: $result\n";

    push @check_dependencies, grep { $_ } GetComponentNameFromDirectory $directory unless $result eq "Update source not defined";

    INFOMSG "Updated\n" if $result =~ /^Updated/;
    WARNMSG "$result\n" if grep { $result eq $_ } ( "Not on head", "Conflicts", "Uncommitted changes", "Multiple heads" );

    push @not_on_head, EscapeFinrocHome $directory if $result =~ /^Not on head/;
    push @updated, EscapeFinrocHome $directory if $result =~ /^Updated/;
    push @conflicts, EscapeFinrocHome $directory if $result eq "Conflicts";
    push @modified, EscapeFinrocHome $directory if $result eq "Uncommitted changes";
};



##################################
##  Check for new dependencies  ##
##################################

if (@check_dependencies)
{
    INFOMSG "Checking for new dependencies...\n";
    my $check_dependencies = join " ", grep { defined and `finroc_search '^$_\$' 2>/dev/null`} @check_dependencies;
    my $credentials = "";
    $credentials .= sprintf " --username '%s'", $username if defined $username;
    $credentials .= sprintf " --password '%s'", $password if defined $password;
    DEBUGMSG sprintf "Executing '%s'\n", "finroc_get -o no -y $credentials $check_dependencies";
    system "finroc_get -o no -y $credentials $check_dependencies";
    INFOMSG "Done.\n";
}



INFOMSG sprintf "The following directories were successfully updated:\n  %s\n", join " ", @updated if @updated;
WARNMSG sprintf "The following directories were not on the head of their current branch and might need manual processing:\n  %s\n", join " ", @not_on_head if @not_on_head;
WARNMSG sprintf "The following directories have conflicts that must be manually resolved:\n  %s\n", join " ", @conflicts if @conflicts;
WARNMSG sprintf "The following directories have uncommitted changes and need manual processing:\n  %s\n", join " ", @modified if @modified;



exit 0;
