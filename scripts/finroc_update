#!/usr/bin/perl -w

# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 2
# of the License, or (at your option) any later version.
# 
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
# 
#----------------------------------------------------------------------
# \file    finroc_update
#
# \author  Tobias Foehst
#
# \date    2011-06-30
#
#----------------------------------------------------------------------

use strict;

use Env '$FINROC_HOME';
use Data::Dumper;

use lib "$FINROC_HOME/scripts/perl";
use FINROC::messages;
use FINROC::getopt;
use FINROC::sources;
use FINROC::rcs;
use FINROC::terminal;

############################
##  Command line options  ##
############################

SetHelp undef,
{
    "-u <username>, --username=<username>" => "use <username> to get access to repositories",
    "-p <password, --password=<password>" => "use <password> to get access to repositories"
}, undef;

ParseCommandLine [ "optional=s", "username=s", "password=s" ], undef;



######################
##  Perform update  ##
######################

my @updated;
my @conflicts;
my @modified;
my @outgoing;

sub UpdateWorkingCopy($$)
{
    my ($directory, $remaining) = @_;

    DEBUGMSG sprintf "%s\n", $directory;

    my $current_output = $directory;
    $current_output =~ s/$FINROC_HOME/\$FINROC_HOME/;
    
    INFOMSG $current_output;

    my $result = Update $directory, GetCommandLineOption "username", GetCommandLineOption "password";

    $directory =~ s/$FINROC_HOME/\$FINROC_HOME/;

    push @updated, $directory if $result eq "U";
    push @conflicts, $directory if $result eq "C";
    push @modified, $directory if $result eq "M";
    push @outgoing, $directory if $result eq "O";

    INFOMSG MoveCursorInRowSequence -($remaining + 3 + length $current_output);
    INFOMSG $result;
    INFOMSG MoveCursorInRowSequence $remaining + 2;
    INFOMSG ClearEndOfLineSequence;
    DEBUGMSG "\n";
}



#########################
##  Search components  ##
#########################

sub UpdateList($$)
{
    my ($name, $list) = @_;

    my @existing = grep { -d $_ } @$list;

    return unless @existing;

    INFOMSG sprintf "Updating %s: [%s] ", $name, ' ' x scalar @existing;
    DEBUGMSG "\n";
    my $i = 0;
    map { UpdateWorkingCopy $_, scalar @existing - ++$i; } @existing;
    INFOMSG "Done\n";
}

UpdateList "make_builder", [ "$FINROC_HOME/make_builder" ];

UpdateList "core", [ map { chomp; $_ } `find $FINROC_HOME/sources -maxdepth 4 -name "core" 2> /dev/null` ];

foreach my $class ( "rrlib", "libraries", "tools", "plugins", "projects" )
{
    UpdateList $class, [ map { chomp; my $base = $_; map { chomp; sprintf "%s/%s", $base, $_ } `ls $_` } `find $FINROC_HOME/sources -name "$class" 2> /dev/null` ];
}

UpdateList "finroc", [ "$FINROC_HOME" ];



INFOMSG sprintf "The following directories were successfully updated:\n  %s\n", join " ", @updated if @updated;
WARNMSG sprintf "The following directories have incoming changesets but need manual processing due to local modifications:\n  %s\n", join " ", @modified if @modified;
WARNMSG sprintf "The following directories have incoming changesets but need manual processing due to outgoing changesets (e.g. rebase or merge):\n  %s\n", join " ", @outgoing if @outgoing;
WARNMSG sprintf "The following directories have conflicts that must be manually resolved:\n  %s\n", join " ", @conflicts if @conflicts;



exit 0;
