#!/usr/bin/perl -w

# You received this file as part of Finroc
# A framework for intelligent robot control
#
# Copyright (C) Finroc GbR (finroc.org)
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 2
# of the License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
#
#----------------------------------------------------------------------
# \file    configure
#
# \author  Tobias Foehst
#
# \date    2010-03-26
#
#----------------------------------------------------------------------

use strict;

use Data::Dumper;

use lib "scripts/perl";
use FINROC::messages;
use FINROC::getopt;

my $config_filename = ".finroc.conf";
my @lc_options = ("language", "operating-system", "architecture", "mode");



############################
##  Command line options  ##
############################

SetHelp undef,
{
    "-p <project>, --project=<project>" => "set project name and according paths",
    "-r [yes|no], --restrict-components=[yes|no]" => "only use use local rrlib or finroc components - default: no",
    "-l [<language>], --language=[<language>]" => "programming language",
    "-o <operating-system>, --operating-system=<operating-system>" => "cross-compiling - default: native",
    "-a <architecture>, --architecture=<architecture>" => "cross-compiling - default: native",
    "-c <path>, --cross-root=<path>" => "cross-compiling - default: <none>",
    "-m <mode>, --mode=<mode>" => "compile mode - default: debug",
}, undef;

ParseCommandLine [ "project=s", "restrict-components:s", "language:s", "operating-system=s", "architecture=s", "cross-root:s", "mode=s" ], undef;
{
    if (defined GetCommandLineOption "restrict-components" and GetCommandLineOption "restrict-components" ne "")
    {
        ERRORMSG "Possible values for --restrict-components: yes|no\n" unless GetCommandLineOption("restrict-components") =~ /yes|no/;
    }
    foreach my $option ("operating-system", "mode")
    {
        if (defined GetCommandLineOption $option and GetCommandLineOption $option ne "")
        {
            ERRORMSG "Charater '_' not allowed in values for --$option!\n" if GetCommandLineOption($option) =~ /_/;
        }
    }
};


###########################
##  Build configuration  ##
###########################

# read configuration from file
my %configuration;
open CONFIG, "<$config_filename" and eval
{
    while (<CONFIG>)
    {
        chomp;
        my ($option, $value) = split " = ";
        $configuration{$option} = $value;
    }
    close CONFIG;
};

DEBUGMSG sprintf "configuration from file:\n%s\n", Dumper \%configuration;

# overwrite settings using command line options
foreach my $option (GetCommandLineOptions)
{
    $configuration{$option} = GetCommandLineOption $option;
}
map { $configuration{$_} = lc $configuration{$_} } grep { defined $configuration{$_} } @lc_options;

# cleanup old config values
delete $configuration{"target"};

# default values if not set
my @undef = ("project", "restrict-components", "language", "cross-root");
my @native = ("operating-system", "architecture");
map { $configuration{$_} = undef } grep { !(defined $configuration{$_} and $configuration{$_} ne "") } @undef;
map { $configuration{$_} = "native" } grep { !(defined $configuration{$_} and $configuration{$_} ne "") } @native;
$configuration{"mode"} = "debug" unless defined $configuration{"mode"} and $configuration{"mode"} ne "";

# backwards compatibility
$configuration{"operating-system"} =~ s/_/-/g;
$configuration{"operating-system"} = "native" if $configuration{"operating-system"} eq "auto";
$configuration{"architecture"} = "native" if $configuration{"architecture"} eq "auto";
$configuration{"mode"} =~ s/_/-/g;

# check target
my $operating_system = $configuration{"operating-system"};
my $operating_system_native = join "", map { chomp; s/_/-/g; lc $_ } `uname -s`;
$operating_system = $operating_system_native if $operating_system eq "native";
my $architecture = $configuration{"architecture"};
my $architecture_native = join "", map { chomp; lc $_ } `uname -m`;
$architecture = $architecture_native if $architecture eq "native";
my $cross = $operating_system ne $operating_system_native || $architecture ne $architecture_native;
if ($cross)
{
    ERRORMSG sprintf "Cross-root not set while cross-compiling for %s_%s!\n", $operating_system, $architecture unless defined $configuration{'cross-root'};
}
ERRORMSG sprintf "Cross-root folder `%s' does not exist!\n", $configuration{'cross-root'} unless !defined $configuration{'cross-root'} || -d $configuration{'cross-root'};
my $target = sprintf "%s_%s_%s", $operating_system, $architecture, lc $configuration{"mode"};
$target = sprintf "cross_%s", $target if $cross;
ERRORMSG sprintf "Target `%s' does not exist!\n", $target unless -f sprintf "etc/targets/%s", $target;

# check existence of project
if (defined $configuration{"project"})
{
    my $project_exists = 0;
    foreach my $language (defined $configuration{'language'} ? ( $configuration{'language'} ) : map { chomp; $_ } `ls sources`)
    {
        if (-d sprintf "sources/%s/projects/%s", $language, $configuration{"project"})
        {
            $project_exists = 1;
            $configuration{'language'} = $language;
            last;
        }
    }
    unless ($project_exists)
    {
        INFOMSG sprintf "\nWarning: %s project `%s' does not exist!\n\n", $configuration{'language'}, $configuration{'project'};
        $configuration{"project"} = undef;
    }
}
$configuration{'language'} = undef unless defined $configuration{'project'};

DEBUGMSG sprintf "resulting configuration:\n%s\n", Dumper \%configuration;

# write configuration to file
open CONFIG, ">$config_filename" or die "Could not write to `$config_filename'!";
foreach my $option (keys %configuration)
{
    printf CONFIG "%s = %s\n", $option, $configuration{$option} if defined $configuration{$option};
}
close CONFIG;

# additional configuration
$configuration{"restrict-components"} = "no" unless defined $configuration{"restrict-components"};
$configuration{"make_builder_flags"} = [ "--report-unmanaged-files" ];
push @{$configuration{"make_builder_flags"}}, "--local-libs-only" if $configuration{"restrict-components"} eq "yes";
$configuration{"architecture"} = $architecture;
$configuration{"architecture-native"} = $architecture_native;
$configuration{"operating-system"} = $operating_system;
$configuration{"operating-system-native"} = $operating_system_native;
$configuration{"target"} = $target;
use Cwd;
$configuration{"home"} = getcwd;
$configuration{"project_home"} = sprintf "%s/sources/%s/projects/%s", $configuration{"home"}, $configuration{'language'}, $configuration{"project"} if defined $configuration{"project"};
DEBUGMSG sprintf "prepared for setting environment:\n%s\n", Dumper \%configuration;



##########################
##  Print new settings  ##
##########################

sub PrintSetting($$) { INFOMSG sprintf " %-20s %s\n", shift().":", shift; }

INFOMSG "----------------------------------\n";
INFOMSG " FINROC Settings\n";
INFOMSG "----------------------------------\n";
PrintSetting "Home", $configuration{"home"};
PrintSetting "Project", defined $configuration{"project"} ? $configuration{"project"} : "<unknown>";
PrintSetting "Project Home", defined $configuration{"project_home"} ? $configuration{"project_home"} : "<unknown>";
PrintSetting "Language", defined $configuration{"language"} ? $configuration{"language"} : "<unknown>";
PrintSetting "Target", $configuration{"target"};
PrintSetting "Cross Root", $configuration{"cross-root"} if defined $configuration{"cross-root"};
PrintSetting "Restrict Components", $configuration{"restrict-components"};
INFOMSG "----------------------------------\n";



#########################
##  Setup environment  ##
#########################

sub SetEnvironment($) {
    my ($command) = @_;
    print "$command;\n";
    DEBUGMSG "$command;\n";
}

# FINROC_HOME
SetEnvironment sprintf "export FINROC_HOME=\"%s\"", $configuration{"home"};

# FINROC_PROJECT
SetEnvironment sprintf "unset FINROC_PROJECT";
SetEnvironment sprintf "export FINROC_PROJECT=%s", $configuration{"project"} if defined $configuration{"project"};

# FINROC_PROJECT_HOME
SetEnvironment sprintf "unset FINROC_PROJECT_HOME";
SetEnvironment sprintf "export FINROC_PROJECT_HOME=\"%s\"", $configuration{"project_home"} if defined $configuration{"project_home"};

# FINROC_OPERATING_SYSTEM
SetEnvironment sprintf "export FINROC_OPERATING_SYSTEM=%s", $configuration{"operating-system"};

# FINROC_OPERATING_SYSTEM_NATIVE
SetEnvironment sprintf "export FINROC_OPERATING_SYSTEM_NATIVE=%s", $configuration{"operating-system-native"};

# FINROC_ARCHITECTURE
SetEnvironment sprintf "export FINROC_ARCHITECTURE=%s", $configuration{"architecture"};

# FINROC_ARCHITECTURE_NATIVE
SetEnvironment sprintf "export FINROC_ARCHITECTURE_NATIVE=%s", $configuration{"architecture-native"};

# FINROC_MODE
SetEnvironment sprintf "export FINROC_MODE=%s", $configuration{"mode"};

# FINROC_CROSS_ROOT
SetEnvironment sprintf "unset FINROC_CROSS_ROOT";
SetEnvironment sprintf "export FINROC_CROSS_ROOT=%s", $configuration{"cross-root"} if defined $configuration{"cross-root"};

# FINROC_TARGET
SetEnvironment sprintf "export FINROC_TARGET=%s", $configuration{"target"};

# FINROC_MAKE_BUILDER_FLAGS
SetEnvironment sprintf "export FINROC_MAKE_BUILDER_FLAGS=\"%s\"", join " ", @{$configuration{"make_builder_flags"}};

# RRLIB_SIMVIS3D_RESOURCES
SetEnvironment sprintf "export RRLIB_SIMVIS3D_RESOURCES=\"%s/resources/simvis3d\":/usr/local/share/rrlib/simvis3d:/usr/share/rrlib/simvis3d", $configuration{"home"};

# RRLIB_LOGGING_PATH
SetEnvironment sprintf "export RRLIB_LOGGING_PATH=/usr/include:/usr/include/finroc:sources/cpp";

# PATH
my (@path, @finroc_path, %finroc_path_elements);
push @finroc_path, sprintf "%s/export/%s/bin", $configuration{"home"}, $configuration{"target"};
push @finroc_path, sprintf "%s/scripts", $configuration{"project_home"} if defined $configuration{"project_home"};
push @finroc_path, sprintf "%s/scripts", $configuration{"home"};

if (exists $ENV{"PATH"})
{
    %finroc_path_elements = map { $_ => 1 } (split ":", $ENV{"FINROC_PATH"}) if exists $ENV{"FINROC_PATH"};
    eval { push @path, $_ unless exists $finroc_path_elements{$_} } foreach (split ":", $ENV{"PATH"});
}

SetEnvironment sprintf "export PATH=%s", join ":", map { "\"$_\"" } @path;
SetEnvironment sprintf "export FINROC_PATH=%s", join ":", map { "\"$_\"" } @finroc_path;
SetEnvironment 'export PATH=$FINROC_PATH:$PATH';

# LD_LIBRARY_PATH
my (@ld_library_path, @finroc_ld_library_path, %finroc_ld_library_path_elements);
push @finroc_ld_library_path, sprintf "%s/export/%s/lib", $configuration{"home"}, $configuration{"target"};

if (exists $ENV{"LD_LIBRARY_PATH"})
{
    %finroc_ld_library_path_elements = map { $_ => 1 } (split ":", $ENV{"FINROC_LD_LIBRARY_PATH"}) if exists $ENV{"FINROC_LD_LIBRARY_PATH"};
    eval { push @ld_library_path, $_ unless exists $finroc_ld_library_path_elements{$_} } foreach (split ":", $ENV{"LD_LIBRARY_PATH"});
}

SetEnvironment sprintf "export LD_LIBRARY_PATH=%s", join ":", map { "\"$_\"" } @ld_library_path;
SetEnvironment sprintf "export FINROC_LD_LIBRARY_PATH=%s", join ":", map { "\"$_\"" } @finroc_ld_library_path;
SetEnvironment 'export LD_LIBRARY_PATH=$FINROC_LD_LIBRARY_PATH:$LD_LIBRARY_PATH';



exit 0;
