//
// %%INTRO%%
//
// Copyright (C) %%COPYRIGHT%%
//
// %%LICENSE%%
//
//----------------------------------------------------------------------
/*!\file    %%FILE%%
 *
 * \author  %%AUTHOR%%
 *
 * \date    %%DATE%%
 *
 * \brief Contains m%%NAME%%
 *
 * \b m%%NAME%%
 *
 * %%DESCRIPTION%%
 *
 */
//----------------------------------------------------------------------
#ifndef %%SENTINEL%%
#define %%SENTINEL%%

#include "core/structure/tModule.h"

//----------------------------------------------------------------------
// External includes (system with <>, local with "")
//----------------------------------------------------------------------

//----------------------------------------------------------------------
// Internal includes with ""
//----------------------------------------------------------------------

//----------------------------------------------------------------------
// Namespace declaration
//----------------------------------------------------------------------
%%OPEN_NAMESPACE%%

//----------------------------------------------------------------------
// Forward declarations / typedefs / enums
//----------------------------------------------------------------------

//----------------------------------------------------------------------
// Class declaration
//----------------------------------------------------------------------
//! %%SHORT_DESCRIPTION%%
/*!
 * %%DESCRIPTION%%
 */
class m%%NAME%% : public core::structure::tModule
{
  static core::tStandardCreateModuleAction<m%%NAME%%> cCREATE_ACTION;

//----------------------------------------------------------------------
// Ports (These are the only variables that may be declared public)
//----------------------------------------------------------------------
public:

  tStaticParameter<double> static_parameter;
  
  tParameter<double> parameter;

  tInput<double> input_signal_1;
  tInput<double> input_signal_2;

  tOutput<double> output_signal_1;
  tOutput<double> output_signal_2;

//----------------------------------------------------------------------
// Public methods and typedefs
//----------------------------------------------------------------------
public:

  m%%NAME%%(core::tFrameworkElement *parent, const util::tString &name = "%%NAME%%");

  ~m%%NAME%%();

//----------------------------------------------------------------------
// Protected methods
//----------------------------------------------------------------------
protected:

  virtual void ParametersChanged();

  virtual void Update();

//----------------------------------------------------------------------
// Private fields and methods
//----------------------------------------------------------------------
private:

  double some_value;
  
  virtual void EvaluateStaticParameters();
  
};

//----------------------------------------------------------------------
// End of namespace declaration
//----------------------------------------------------------------------
%%CLOSE_NAMESPACE%%
%%INCLUDE_HPP%%

#endif
